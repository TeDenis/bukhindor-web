openapi: 3.0.3
info:
  title: Bukhindor Backend API
  description: REST API для Flutter приложения Bukhindor
  version: 1.0.0
  contact:
    name: Bukhindor Team
    email: support@bukhindor.com

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.bukhindor.com
    description: Production server

paths:
  /health:
    get:
      summary: Health check
      description: Проверка состояния сервиса
      tags:
        - System
      responses:
        '200':
          description: Сервис работает
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  service:
                    type: string
                    example: "bukhindor-backend"

  /api/v1/auth/register:
    post:
      summary: Регистрация пользователя
      description: Создает нового пользователя в системе
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/login:
    post:
      summary: Вход в систему
      description: Аутентифицирует пользователя и возвращает токен
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
          headers:
            Set-Cookie:
              description: JWT токен в куки
              schema:
                type: string
                example: "access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Lax"
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/reset-password:
    post:
      summary: Запрос сброса пароля
      description: Создает запрос на сброс пароля для указанного email
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Запрос на сброс пароля создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/refresh:
    post:
      summary: Обновить токены
      description: Обновляет access токен используя refresh токен
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Токены успешно обновлены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
          headers:
            Set-Cookie:
              description: Новый JWT токен в куки
              schema:
                type: string
                example: "access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Lax"
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Неверный refresh токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/me:
    get:
      summary: Получить текущего пользователя
      description: Возвращает информацию о текущем авторизованном пользователе
      tags:
        - Authentication
      security:
        - BearerAuth: []
        - CookieAuth: []
      responses:
        '200':
          description: Информация о пользователе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users:
    get:
      summary: Получить список пользователей
      description: Возвращает список всех пользователей в системе
      tags:
        - Users
      security:
        - BearerAuth: []
        - CookieAuth: []
      parameters:
        - name: page
          in: query
          description: Номер страницы
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Количество записей на странице
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
                  total:
                    type: integer
                    description: Общее количество пользователей
                  page:
                    type: integer
                    description: Текущая страница
                  limit:
                    type: integer
                    description: Количество записей на странице
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Создать пользователя
      description: Создает нового пользователя в системе
      tags:
        - Users
      security:
        - BearerAuth: []
        - CookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/{id}:
    get:
      summary: Получить пользователя
      description: Возвращает пользователя по его ID
      tags:
        - Users
      security:
        - BearerAuth: []
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID пользователя
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Пользователь найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Обновить пользователя
      description: Обновляет данные пользователя
      tags:
        - Users
      security:
        - BearerAuth: []
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID пользователя
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Пользователь обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Удалить пользователя
      description: Удаляет пользователя из системы
      tags:
        - Users
      security:
        - BearerAuth: []
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID пользователя
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Пользователь удален
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    CookieAuth:
      type: apiKey
      in: cookie
      name: access_token

  schemas:
    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Имя пользователя
          example: "John Doe"
        email:
          type: string
          format: email
          maxLength: 255
          description: Email пользователя
          example: "john@example.com"
        password:
          type: string
          minLength: 6
          maxLength: 128
          description: Пароль пользователя
          example: "password123"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: Email пользователя
          example: "john@example.com"
        password:
          type: string
          description: Пароль пользователя
          example: "password123"

    ResetPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Email пользователя для сброса пароля
          example: "john@example.com"

    CreateUserRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Имя пользователя
          example: "John Doe"
        email:
          type: string
          format: email
          maxLength: 255
          description: Email пользователя
          example: "john@example.com"
        password:
          type: string
          minLength: 6
          maxLength: 128
          description: Пароль пользователя
          example: "password123"

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Имя пользователя
          example: "John Doe"
        email:
          type: string
          format: email
          maxLength: 255
          description: Email пользователя
          example: "john@example.com"
        is_active:
          type: boolean
          description: Активен ли пользователь
          example: true

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Уникальный идентификатор пользователя
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          description: Email пользователя
          example: "john@example.com"
        name:
          type: string
          description: Имя пользователя
          example: "John Doe"
        is_active:
          type: boolean
          description: Активен ли пользователь
          example: true
        created_at:
          type: string
          format: date-time
          description: Дата создания пользователя
          example: "2024-01-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Дата последнего обновления пользователя
          example: "2024-01-01T12:00:00Z"

    LoginResponse:
      type: object
      properties:
        message:
          type: string
          description: Сообщение об успешном входе
          example: "Login successful"
        user:
          type: object
          properties:
            access_token:
              type: string
              description: JWT access токен
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            refresh_token:
              type: string
              description: JWT refresh токен
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    RegisterResponse:
      type: object
      properties:
        message:
          type: string
          description: Сообщение об успешной регистрации
          example: "User registered successfully"
        user:
          $ref: '#/components/schemas/UserResponse'

    MessageResponse:
      type: object
      properties:
        message:
          type: string
          description: Сообщение
          example: "Operation completed successfully"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Описание ошибки
          example: "Invalid input data"
        code:
          type: integer
          description: HTTP код ошибки
          example: 400

tags:
  - name: Authentication
    description: Операции аутентификации и авторизации
  - name: Users
    description: Управление пользователями
  - name: System
    description: Системные операции 